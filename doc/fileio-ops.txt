==============================================================================
------------------------------------------------------------------------------
                                                                   *file_handle*
                                 `file_handle`
A typical convention when opening a file is to use assert according to
sources. On failure, nil and the error message is supplied to `assert`. On
success `io.open` returns a file handle (stream) and assert returns it. I
haven't read enough to know if this is a good convention outside of what
the book is telling me as of now.

------------------------------------------------------------------------------
                                                                 *file_contents*
                                `file_contents`
After we receive a handle we can read from or write to the stream through
using methods like `read` and `write`. We call them as methods using the
colon notation. Note in colon notation self is automatically passed.

------------------------------------------------------------------------------
First question, why does type(file) return `userdata`? That doesn't mean
much to me nor allows much usage. Is there a way to gather more
information on the type? Am I doing something wrong?

Usage ~
>lua
    print("type(file_handle): ", type(file_handle))
    file_handle:close()
<

Lua provides functions designed specifically for file objects. The most
common is `io.type()`. Another question now is what happens when I call
`io.type()` after it's been closed? What will it print?

Usage ~
>lua
    print("io.type(file_handle): ", io.type(file_handle))
    file_handle:close()
    print("io.type(file_handle): ", io.type(file_handle))
<
io.type(file_handle): 	file
io.type(file_handle): 	closed file

------------------------------------------------------------------------------
So when would I want to use io.type(f)? Is there a real world situation
where it might be useful?

- Ensuring a file handle is still opened prior to doing something

Usage ~
>lua
    if io.type(file_handle) == "file" then
        -- do something
    else
        error("File is already closed.")
    end
<

- Ensuring closed is not called on a already closed file handle

Usage ~
>lua
    local function safe_close(file_handle)
        if io.type(file_handle) == "file" then
            file_handle:close
        end
    end
<

- Ensuring a file handle argument to function is a file handle

Usage ~
>lua
    local function foo(file_handle)
        assert(io.type(file_handle) == "file", "Expected a file handle")
        -- do something
    end
<

- Ensuring that I can reopen a file safely unsure if it was closed

Usage ~
>lua
    local function reopen(file_handle, filename)
        if io.type(file_handle) ~= "file" then
            return io.open(filename, "r")
        else
            return file_handle
        end
    end
<

==============================================================================
------------------------------------------------------------------------------
A question that has popped up now is how can I get away with writing to the
standard output yet not specify any kind of stream? How does the following
just know or allow an implicit behavior?

Usage ~
>lua
    io.write("Hello World\n")
<

The I/O library offsers handles for the three predefined C streams being
standard input `io.stdin`, standard output `io.stdout` and standard error
`io.stderr`.

Reading through sources I hear the phrase "convenience functions" which is
calling `io.write`, `io.read` as is. Lua is using the default file handles
here where satndard input is mapped to `io.read` and standard output is
mapped to `io.write`.

It's not unreasonable, according to the book and other sources, to imply
precision and or clarity by explicitly calling the default handles as such.

Usage ~
>lua
    io.stdout:write("Hello World\n")
<

But why is it not unreasonable if this behavior is implicitly handled for
me? Why would I ever want to manually write it out. Afterall, isn't this
the entire point to convenience functions?

- You may need to write to both a log file and to stdout. Conveying clarity
  and precision in this case ensures safe intention.

Usage ~
>lua
    local log = io.open("log.txt", "w")
    log:write("Preparing to execute task\n")
    io.stdout:write("10% complete\n")
    io.stdout:write("20% complete\n")
    log:write("Task completed\n")
    log:close()
<

- What if the standard output is redirected to a file? What if an embedded
  system (that is running a OS) overrides standard output in some way?
  Conveying clarity and precision in this case also ensures safe intention.

Usage ~
>lua
    local log = io.open("log.txt", "w")
    io.output(log)
    io.write("This goes to the log file\n")
    io.stdout:write("But this goes to stdout")
<

- It may be required that you need to write to several streams at once and
  by choosing to do so conveying clarity in both situations contributes to
  readability/consistency.

Usage ~
>lua
    io.stderr:write("this is an error\n")
    io.stdout:write("this is a mesasge\n")
<

==============================================================================
------------------------------------------------------------------------------
I want to take some time to understand the IO methods read/write a bit 
more in preparation for the next step which is reading/writing binary
files. I've learned how to call these methods but haven't really inspected
their signature. Lets hop over to the manual.

> file:read(...)
> Reads the file `file`, according to the given formats, which specify
> what to read. For each format, the function returns a string (or number)
> with the characters read, or nil if it cannot read data with specified
> format. When called without formats, it uses a default format that reads
> the entire next line.

Lets get our initial set of questions out of the way on what we just read.
It's important to question everything I read. If i'm not questioning what
I'm reading then i'm not actively learning.

- There are formats we pass to read. What exactly is being defined as a 
  format? Why does lua choose to use formats?

    From my reading a format refers to this predefined way of interpreting
    and extracting data from a file. So it tells Lua how to read and how
    much to read. So I can kind of think of them as little shortcuts or
    instructions for interpreting the stream of bytes coming from a file.

    I can summarize three main reason off the top of my head why Lua uses
    formats gathered from sources.

        - Simplicity: Lua favors minimalism. Instead of having a bunch of
          different functions like `readLine(), readBytes(n), and so on it
          provides a single function `read()` that can take a flexible set
          of instructions via formats.

        - Efficiency: Formats are interpreted natively and allow Lua to
          manage buffering and memory use efficiently. Interpreted
          natively means it's built directly into Lua interpreter's C
          source code, not written in Lua or handled by a external
          library.

        - Portability: Formats work across all Lua-supported platforms,
          abstracting away low-level file system differences. This means
          that `file:read(...)` behaves consistently whether i'm on
          Windows, Linux/Unix, or an embedded platform. I don't have to 
          write different code for different platforms. For example, on 
          Windows it uses `\r\n` line endings but on nix platforms it's
          just `\n`. Lua doesn't make you care.

- Can I provide combinations of formats or just one format? How does one 
  choose which format is suitable? What if I don't know what the contents
  of a file are?

    Looks like I can provide an number of arguments to `file:read()`. So I
    I could do `file:read("n", "n", "l")`. I guess if I don't know what
    exactly the file contains I would read raw bytes or scan lines and
    then analyze them dynamically. Typically you would know so maybe a
    irrelavent question to ask.

- To confirm read can return different types? It can return a string or a 
  number? What if there's multiple numbers separated by a space or comma 
  will it return it as a string then?

    I'll explore this below later this kind of hits on the fact that I can
    pass multiple formats to read which could return different types.

- Is there a Lua idiom in calling read that would allow us to catch cases
  where nil is returned? Should I really treat nil as a error though? An 
  empty file could return nil, correct? That's not really an error, is it?

    The values `nil` on return would simply mean "couldn't read as 
    requested" but this isn't an error always. An end of file might give
    me `nil`. If I gave the wrong format I could also get `nil`. If the 
    file is empty I could get `nil`. The idiomatic way is to check the
    value if it's equal to `nil` before using it.

- It says it uses a default format when not provided one. What format is
  it? The manual says it reads the entire next line. That doesn't make any
  sense. Shouldn't it read the current line. Why skip ahead or am I not
  understanding something?

    So the default is "l". It reads a line (without the newline char). I
    was misunderstanding the manaul. When it says it reads the next line,
    it just means "from the current possition up to the next newline". I
    can think of a file as a stream. I'm at a position and calling the
    method `file:read()` moves me forward. So it's not skipping anything.
    The next line is the first line from where I'm currently at (i.e.
    where the file pointer currently is pointing).

- Why do I see snippets with the asterisk in front of the format specifier
  but in other places I don't? What is the use of the asterisk?

    This asterisk is a way of telling lua "Yo, i'm giving you a format,
    not a number of bytes". This is perfectly valid `file:read(4)`. Says
    read 4 bytes. I can't speak to all versions of Lua but it we look in
    the source code liolib.c (for Lua 5.4) we see the asterisk is
    optionally. In fact, the comment says "skip optional '*' (for
    compatibility)".

Well I think that's a good review over `file:read()`. Learned what the
method takes and returns. Dived into the various formats that are allowed
and what it means to pass a format to Lua.


 vim:tw=78:ts=8:noet:ft=help:norl: